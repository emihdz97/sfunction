(disp "//_______ Asignación de variables _______\\")
(integer intN 3)
(integer intM 4)

(disp "valor de intN")
(disp intN)
(disp "valor de intM")
(disp intM)
(disp "valor de intM=intM+1")
(intM=intM+1)
(disp intM)

(disp "valor de f flotante")
(float f 2.3)
(disp f)

(disp "valor de b buleano")
(bool b #t)
(disp b)

(disp "valor de str")
(string str "hola")
(disp str)

(disp "  ")
(disp "//_______ Operaciónes matemáticas sobre flotantes _______\\")
(disp " ")
(disp "suma 3.3 + intN")
(disp 3.3 + intN)

(disp "resta 2.0 - 3.1416")
(disp 2.0 - 3.1416)

(disp "division 2.5 / 1.2")
(disp 2.5 / 1.2)

(disp "multiplicacion 4.2 * 10.34")
(disp 4.2 * 10.34)

(disp "potencia 1.5 ^ m")
(disp 1.5 ^ intM)

(disp "modulo 12.2 % 3")
(disp 12.2 % 3)
(disp "  ")

(disp "//_______ Operaciónes matemáticas sobre enteros _______\\")
(disp " ")
(disp "suma n + m")
(disp intM + intN)

(disp "resta n * m")
(disp intN - intM)

(disp "division n / m")
(disp intN / intM)

(disp "multiplicacion n * m")
(disp intN * intM)

(disp "potencia n ^ m")
(disp intN ^ intM)

(disp "modulo m % n")
(disp intM % intN)
(disp "  ")


(disp "//_______ Conversión de tipos _______\\")
(disp "  ")
(disp "stingify intN")
(disp (stringify intN))

(disp "floatify intN")
(disp (floatify intN))

(disp "intfy 3.5")
(disp (intfy 3.5))

(disp "intfy 3.5")
(disp (intfy 3.5))
(disp "  ")


(disp "//_______ Operaciones sobre strings _______\\")
(disp "  ")

(disp "concatenación de strings: hola+ +mundo")
(disp "hola"+" "+"mundo")
(disp "  ")

(disp "multiplicación de strings: hola * 4")
(disp "hola"*4)
(disp "  ")

(disp "substrings de strings: hola / 2")
(disp "hola"/2)
(disp "  ")

(disp "character de strings: hola % 0")
(disp "hola"%0)
(disp "  ")

(disp "concatenación de operadores: hola/2*5")
(disp "hola"/2*5)
(disp "  ")

(disp "concatenación de operadores: hola%0*5")
(disp "hola"%0*5)
(disp "  ")

(disp "concatenación de operadores: hola/2+mundo*5")
(disp "hola"/2+"mundo"*5)
(disp "  ")

(disp "concatenación de operadores: hola%0+mundo/2")
(disp "hola"%0+"mundo"/2)
(disp "  ")

(disp "concatenación de operadores: hola%0+mundo/m")
(disp "hola"%0+"mundo"/intM)
(disp "  ")


(disp "//_______ Operadores comparativos _______\\")
(disp " ")
(disp "Igual: 8==8")
(disp 8==8)
(disp "Igual: 8==3")
(disp 8==3)
(disp "Igual: hola==mundo")
(disp "hola"=="mundo")
(disp "Igual: hola==hola")
(disp "hola"=="hola")
(disp " ")

(disp "Mayor que: 8>8")
(disp 8>8)
(disp "Mayor que: 8>3")
(disp 8>3)
(disp "Mayor que: 1>8")
(disp 1>8)
(disp "Mayor que: hola>hola")
(disp "hola">"hola")
(disp " ")

(disp "Mayor o Igual: 8>=8")
(disp 8>=8)
(disp "Mayor o Igual: 8>=3")
(disp 8>=3)
(disp "Mayor o Igual: hola>=mundo")
(disp "hola">="mundo")
(disp "Mayor o Igual: hola>=hola")
(disp "hola">="hola")
(disp " ")

(disp "Menor que: 8<8")
(disp 8<8)
(disp "Menor que: 8<3")
(disp 8<3)
(disp "Menor que: 1<8")
(disp 1<8)
(disp "Menor que: hola<hola")
(disp "hola"<"hola")
(disp " ")

(disp "Menor o Igual: 8<=8")
(disp 8<=8)
(disp "Menor o Igual: 8<=3")
(disp 8<=3)
(disp "Menor o Igual que: 1<=8")
(disp 1<=8)
(disp "Menor o Igual: hola<=mundo")
(disp "hola"<="mundo")
(disp "Menor o Igual: hola<=hola")
(disp "hola"<="hola")
(disp " ")

(disp "//_______ Arreglos _______\\")
(disp " ")
(disp "Array de integer")
(array integer arr {12,3,4,5})
(disp arr)
(disp " ")
(disp "Array de strings")
(array string sarr {"samantha","emilio","edgar","alejandro","tamara"})
(disp sarr)
(disp " ")
(disp "Array de flotantes")
(array float z {1.2,4.8,9.345})
(disp z)
(disp " ")

(disp "//_______ Estructuras de control: if _______\\")
(disp " ")
(disp "if 7==9")
(if 7==9
	(
		(disp "es igual")
	)
	(
		(disp "no es igual")
	)
)
(disp "9==9")
(if 9==9
	(
		(disp "es igual")
	)
	(
		(disp "no es igual")
	)
)
(disp " ")

(disp "//_______ Ciclo: while _______\\")
(integer i 0)
(disp "valor de i")
(disp i)
(disp "fuera")
(while i<=5
	(
		(disp "dentro")
		(disp "i: ")
		(disp i)

		(i = i+1)
	)
)
(disp "fuera")

(disp "//_______ Ciclo: do-while _______\\")
(integer a 10)
(disp "valor de a")
(disp a)
(disp "fuera")
(disp "do-while a<=5")
(do-while a<=5
	(
		(disp "dentro")
		(disp "a: ")
		(disp a)
		(a = a+1)
	)
)
(disp "valor de a")
(disp a)
(disp "fuera")

(disp "//_______ Ciclo: for _______\\")
(disp "For corre sobre un arreglo, la variable i toma el valor del dato dentro de ese en ese ciclo")
(disp arr)
(for (i #in arr)
	(
		(disp i)
	)
)



